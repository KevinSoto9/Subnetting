@page "/"
@using System.Net
@using System.Net.Sockets
@using System.Text.RegularExpressions;

<h3>Calculadora de Subnetting</h3>

<table>
    <tr>
        <td colspan="2">
            <p>Dirección IP:</p>
            <input style="width: 450px;" @bind="ipAddress" />
        </td>
    </tr>
    <tr>
        <td colspan="2">
            <p>Máscara de Red:</p>
            <input style="width: 450px;" @bind="subnetMask" />
        </td>
    </tr>
    <tr>
        <td colspan="2">
            <p>Número de Hosts por Subred:</p>
            <input style="width: 450px;" @bind="hostsPerSubnet" type="number" />
        </td>
    </tr>
    <tr>
        <td colspan="2">
            <p>Número de Subredes:</p>
            <input style="width: 450px;" @bind="numSubnets" type="number" min="1" />
        </td>
    </tr>
    <tr>
        <td colspan="2">
            <button @onclick="CalcularSubnets">Calcular</button>
        </td>
    </tr>
    @if (subnets != null && subnets.Count > 0)
    {
        <tr>
            <th colspan="2">Información de Subredes</th>
        </tr>
        @foreach (var subnet in subnets)
        {
            <tr>
                <td colspan="2">
                    <ul>
                        <li>Dirección IP: @subnet.DireccionRed.ToString()</li>
                        <li>Máscara de Red: @subnet.MascaraRed.ToString()</li>
                        <li>Direcciones asignables: @subnet.DireccionInicio.ToString() - @subnet.DireccionFin.ToString()</li>
                        <li>Dirección de broadcast: @subnet.DireccionBroadcast.ToString()</li>
                        <li>Hosts pedidos: @subnet.HostsPorSubred</li>
                        <li>Hosts disponibles: @subnet.HostsDisponibles</li>
                    </ul>
                </td>
                <td colspan="2">
                    <p style="color: red;">@errorMessage</p>
                </td>
            </tr>
        }
    }
</table>

@code {
    private string ipAddress;
    private int subnetMask;
    private int hostsPerSubnet;
    private int numSubnets;
    private List<Subred> subnets;
    private string errorMessage;

    private class Subred
    {
        public int Indice { get; set; }
        public IPAddress DireccionRed { get; set; }
        public IPAddress MascaraRed { get; set; }
        public IPAddress DireccionBroadcast { get; set; }
        public IPAddress DireccionInicio { get; set; }
        public IPAddress DireccionFin { get; set; }
        public int HostsPorSubred { get; set; }
        public int HostsDisponibles { get; set; }

    }

    private void CalcularSubnets()
    {
        subnets = new List<Subred>();

        errorMessage = string.Empty;


        if (!IPAddress.TryParse(ipAddress, out IPAddress ip) || !EsMascaraRedValida(subnetMask) || !EsIpValida(ipAddress) || hostsPerSubnet <= 0 || numSubnets <= 0)
        {
            errorMessage = "El formato de entrada es incorrecto.";
            return;
        }

        int subredesTotales = numSubnets;
        int bitsMascaraRed = CalcularBitsMascaraRed(subredesTotales);

        if (bitsMascaraRed > 32 - subnetMask)
        {
            errorMessage = "La mascara esta mal";
            return;
        }

        var direccionRed = CalcularDireccionRed(ip, subnetMask);
        var bytesMascaraRed = ObtenerBytesMascaraRed(subnetMask + bitsMascaraRed);

        for (int i = 0; i < numSubnets; i++)
        {
            var subred = new Subred();
            subred.Indice = i + 1;
            subred.DireccionRed = direccionRed;
            subred.MascaraRed = new IPAddress(bytesMascaraRed);
            subred.DireccionBroadcast = CalcularDireccionBroadcast(direccionRed, bytesMascaraRed);
            subred.DireccionInicio = IncrementarDireccionIP(direccionRed, 1);
            subred.DireccionFin = DecrementarDireccionIP(subred.DireccionBroadcast, 1);
            subred.HostsPorSubred = hostsPerSubnet;
            subred.HostsDisponibles = CalcularHostsDisponibles(subnetMask + bitsMascaraRed) - subredesTotales;

            subnets.Add(subred);

            direccionRed = IncrementarDireccionIP(subred.DireccionBroadcast, 1);
        }
    }

    private bool EsMascaraRedValida(int subnetMask)
    {
        string subnetMaskString = subnetMask.ToString();
        return Regex.IsMatch(subnetMaskString, @"^([0-9]{1,2})$");
    }

    private bool EsIpValida(string ipaddress)
    {
        return Regex.IsMatch(ipaddress, @"^(?:\d{1,3}\.){3}\d{1,3}$");
    }

    private int CalcularBitsMascaraRed(int subredesTotales)
    {
        return (int)Math.Ceiling(Math.Log(subredesTotales, 2));
    }

    private IPAddress CalcularDireccionRed(IPAddress ip, int subnetMask)
    {
        byte[] bytesIP = ip.GetAddressBytes();
        byte[] bytesMascaraRed = ObtenerBytesMascaraRed(subnetMask);
        byte[] bytesDireccionRed = new byte[4];

        for (int i = 0; i < 4; i++)
        {
            bytesDireccionRed[i] = (byte)(bytesIP[i] & bytesMascaraRed[i]);
        }

        return new IPAddress(bytesDireccionRed);
    }

    private byte[] ObtenerBytesMascaraRed(int subnetMask)
    {
        int bytesCompletos = subnetMask / 8;
        int bytesParcial = subnetMask % 8;

        byte[] bytesMascaraRed = new byte[4];

        for (int i = 0; i < bytesCompletos; i++)
        {
            bytesMascaraRed[i] = 255;
        }

        if (bytesParcial > 0)
        {
            bytesMascaraRed[bytesCompletos] = (byte)(255 << (8 - bytesParcial));
        }

        return bytesMascaraRed;
    }

    private IPAddress CalcularDireccionBroadcast(IPAddress direccionRed, byte[] bytesMascaraRed)
    {
        byte[] bytesDireccionBroadcast = new byte[4];

        for (int i = 0; i < 4; i++)
        {
            bytesDireccionBroadcast[i] = (byte)(direccionRed.GetAddressBytes()[i] | ~bytesMascaraRed[i]);
        }

        return new IPAddress(bytesDireccionBroadcast);
    }

    private IPAddress IncrementarDireccionIP(IPAddress ip, int incremento)
    {
        int valorIP = BitConverter.ToInt32(ip.GetAddressBytes().Reverse().ToArray(), 0);
        valorIP += incremento;

        return new IPAddress(BitConverter.GetBytes(valorIP).Reverse().ToArray());
    }

    private IPAddress DecrementarDireccionIP(IPAddress ip, int decremento)
    {
        int valorIP = BitConverter.ToInt32(ip.GetAddressBytes().Reverse().ToArray(), 0);
        valorIP -= decremento;

        return new IPAddress(BitConverter.GetBytes(valorIP).Reverse().ToArray());
    }

    private int CalcularHostsDisponibles(int subnetMask)
    {
        return (int)Math.Pow(2, 32 - subnetMask);
    }
}
